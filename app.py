import streamlit as st
import pandas as pd
import plotly.express as px
from src.data_processing import load_data, filter_data, compute_brand_share, compute_trends
import logging

st.set_page_config(page_title="Laptop Trends 2025", layout="centered")
logger = logging.getLogger(__name__)

def sanitize_text_columns(df: pd.DataFrame) -> pd.DataFrame:
    """–ü–æ–∑–±—É–≤–∞—î–º–æ—Å—å —Å–∏—Ä–∏—Ö 'http' —É –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—è—Ö, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ª—ñ–Ω–∫—É–≤–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ."""
    df = df.copy()
    for col in df.select_dtypes(include=['object', 'string']).columns:
        try:
            df[col] = df[col].astype(str).str.replace(r'https?://', lambda m: m.group(0).replace('://', '[:]//'), regex=True)
        except Exception:
            df[col] = df[col].astype(str).apply(lambda s: s.replace('://', '[:]//'))
        df[col] = df[col].apply(lambda s: s if len(s) <= 300 else s[:300] + '...')
    return df

def safe_plotly_chart(fig):
    try:
        st.plotly_chart(fig, use_container_width=True)
    except Exception:
        logger.exception("Plotly render error")
        st.error("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞. –î–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö.")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üíª Laptop Trends 2025")
st.markdown("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –º–æ–¥–µ–ª–µ–π –Ω–æ—É—Ç–±—É–∫—ñ–≤: —Ü—ñ–Ω–∏, –∞–≤—Ç–æ–Ω–æ–º–Ω—ñ—Å—Ç—å, OLED, AI‚Äë–ø—Ä–æ—Ü–µ—Å–æ—Ä–∏")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
DATA_PATH = "data/sample_laptops.csv"
df = load_data(DATA_PATH)

if df.empty:
    st.error("‚ùå –î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ CSV-—Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    st.stop()

# --- –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å: —Ñ—ñ–ª—å—Ç—Ä–∏ ---
with st.sidebar:
    st.header("üîç –§—ñ–ª—å—Ç—Ä–∏")
    try:
        brands = st.multiselect("–ë—Ä–µ–Ω–¥", options=sorted(df['brand'].unique()), default=sorted(df['brand'].unique())[:5])
    except Exception:
        brands = st.multiselect("–ë—Ä–µ–Ω–¥", options=[], default=[])
    price_min, price_max = st.slider("–¶—ñ–Ω–∞ (USD)", int(df['price_usd'].min()), int(df['price_usd'].max()), (int(df['price_usd'].min()), int(df['price_usd'].max())))
    screen_min, screen_max = st.slider("–î—ñ–∞–≥–æ–Ω–∞–ª—å –µ–∫—Ä–∞–Ω—É (in)", float(df['screen_size_in'].min()), float(df['screen_size_in'].max()), (float(df['screen_size_in'].min()), float(df['screen_size_in'].max())))
    ai_cpu = st.selectbox("AI CPU", options=["–£—Å—ñ", "–Ü–∑ AI", "–ë–µ–∑ AI"])
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    max_show = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ", min_value=3, max_value=60, value=9)

# --- –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è ---
try:
    filtered = filter_data(df, brands=brands, price_range=(price_min, price_max), screen_range=(screen_min, screen_max), ai_cpu=ai_cpu)
except Exception:
    logger.exception("Filter error")
    st.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV.")
    st.stop()

# --- –ú–µ—Ç—Ä–∏–∫–∏ ---
st.markdown("### üìä –ó–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏")
col1, col2, col3 = st.columns(3)
col1.metric("–ú–æ–¥–µ–ª–µ–π (–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)", len(filtered))
col2.metric("–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ (USD)", f"{filtered['price_usd'].mean():.0f}" if len(filtered) else "‚Äî")
col3.metric("–°–µ—Ä–µ–¥–Ω—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ñ—Å—Ç—å (Wh)", f"{filtered['battery_wh'].mean():.0f}" if len(filtered) else "‚Äî")

# --- –í–∫–ª–∞–¥–∫–∏ ---
tab1, tab2, tab3 = st.tabs(["üñºÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "ü•ß –ß–∞—Å—Ç–∫–∞ –±—Ä–µ–Ω–¥—ñ–≤", "üìà –¢—Ä–µ–Ω–¥–∏"])

with tab1:
    try:
        display_df = filtered.sort_values(by='price_usd').reset_index(drop=True)
        if 'url' in display_df.columns:
            display_df = display_df.drop(columns=['url'])
        display_df = sanitize_text_columns(display_df)

        # –ü–æ–∫–∞–∑–∞—Ç–∏ —è–∫ —Å—ñ—Ç–∫—É –∫–∞—Ä—Ç–æ–∫
        rows = display_df.head(int(max_show))
        cols_per_row = 3
        for i in range(0, len(rows), cols_per_row):
            cols = st.columns(cols_per_row)
            for j, (_, row) in enumerate(rows.iloc[i:i+cols_per_row].iterrows()):
                col = cols[j]
                thumb = row.get('thumbnail', '')
                if thumb:
                    # —è–∫—â–æ thumbnail –º—ñ—Å—Ç–∏—Ç—å '[:]', –≤—ñ–¥–Ω–æ–≤–∏–º–æ '://'
                    col.image(thumb.replace('[:]//', '://'), use_container_width=True)
                else:
                    col.image("https://via.placeholder.com/300x200?text=No+image", use_container_width=True)
                col.markdown(f"**{row.get('brand','')} {row.get('model','')}**")
                col.write(f"–¶—ñ–Ω–∞: ${row.get('price_usd','‚Äî')}")
                col.write(f"–ï–∫—Ä–∞–Ω: {row.get('screen_size_in','‚Äî')}\"  ‚Ä¢  {row.get('display_type','‚Äî')}")
                if col.button("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", key=f"det_{i}_{j}"):
                    st.info(f"–î–µ—Ç–∞–ª—ñ: {row.get('brand','')} {row.get('model','')}")
    except Exception:
        logger.exception("Error rendering catalog")
        st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–¥—Ä–æ–±–∏—Ü—ñ –≤ –ª–æ–≥–∞—Ö.")

with tab2:
    try:
        brand_share = compute_brand_share(filtered)
        fig1 = px.pie(brand_share, names='brand', values='count', title='–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –±—Ä–µ–Ω–¥–∞–º–∏', template='plotly_white')
        safe_plotly_chart(fig1)
    except Exception:
        logger.exception("Error in brand pie")
        st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –¥—ñ–∞–≥—Ä–∞–º—É —á–∞—Å—Ç–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤.")

with tab3:
    try:
        trend_df = compute_trends(df)
        if trend_df.empty:
            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ç—Ä–µ–Ω–¥—ñ–≤.")
        else:
            fig2 = px.line(
                trend_df,
                x='year',
                y='value',
                color='metric',
                markers=True,
                line_shape='spline',
                template='plotly_white',
                title='–¢—Ä–µ–Ω–¥–∏: —Ü—ñ–Ω–∞, –∞–≤—Ç–æ–Ω–æ–º–Ω—ñ—Å—Ç—å, OLED'
            )
            fig2.update_layout(
                legend_title_text='–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞',
                xaxis_title='–†—ñ–∫',
                yaxis_title='–ó–Ω–∞—á–µ–Ω–Ω—è',
                margin=dict(l=20, r=20, t=40, b=20),
                font=dict(size=14)
            )
            safe_plotly_chart(fig2)
    except Exception:
        logger.exception("Error in trends")
        st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω–¥–∏. –ü–æ–¥—Ä–æ–±–∏—Ü—ñ –≤ –ª–æ–≥–∞—Ö.")

# --- –ï–∫—Å–ø–æ—Ä—Ç CSV ---
st.markdown("### üì§ –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
try:
    st.download_button(
        "‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —É CSV",
        data=filtered.to_csv(index=False).encode('utf-8'),
        file_name="filtered_laptops.csv",
        mime="text/csv"
    )
except Exception:
    logger.exception("Download error")
    st.error("–ï–∫—Å–ø–æ—Ä—Ç CSV —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
